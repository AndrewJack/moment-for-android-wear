// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    repositories {
        jcenter()
        maven { url 'https://maven.fabric.io/public' }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.0.0'
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'
        //noinspection GradleDynamicVersion
        classpath 'io.fabric.tools:gradle:1.+'
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.12.0'
    }
}

allprojects {
    repositories {
        jcenter()
        maven { url 'https://maven.fabric.io/public' }
        maven { url "https://jitpack.io" }
    }
}

apply plugin: 'com.github.ben-manes.versions'

project.ext.preDexLibs = !project.hasProperty('disablePreDex')

subprojects {
    project.plugins.whenPluginAdded { plugin ->
        if ("com.android.build.gradle.AppPlugin".equals(plugin.class.name)) {
            project.android.dexOptions.preDexLibraries = rootProject.ext.preDexLibs
        } else if ("com.android.build.gradle.LibraryPlugin".equals(plugin.class.name)) {
            project.android.dexOptions.preDexLibraries = rootProject.ext.preDexLibs
        }
    }

    ext {
        gitSha = { ->
            try {
                def stdout = new ByteArrayOutputStream()
                exec {
                    commandLine 'git', 'rev-parse', '--short', 'HEAD'
                    standardOutput = stdout
                }
                return stdout.toString().trim()
            } catch (ignored) {
                return null;
            }
        }

        // keystore property
        def Properties localProps = new Properties()
        if (file('../local.properties').exists()) {
            localProps.load(new FileInputStream(file('../local.properties')))
        }
        keyProps = new Properties()
        if (localProps['keystore.props.file'] != null) {
            keyProps.load(new FileInputStream(file(localProps['keystore.props.file'])))
        }

        versionMajor = 1
        versionMinor = 2
        versionPatch = 0
        versionBuild = 0 // bump for dogfood builds, public betas, etc.

        appEngineLibVersion = "1.9.34"

        buildTools = "23.0.3"
        compileAndTargetSdkLevel = 23
        minSdkLevel = 18
        commonPlayServicesVersion = '8.4.0'
        commonSupportLibraryVersion = '23.2.1'
        daggerVersion = '2.2'
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.12'
}

task clean(type: Delete) {
    group 'build'
    delete rootProject.buildDir
}
